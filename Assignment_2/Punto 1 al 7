--PUNTO 1

CREATE VIEW MEDIOS_PAGO_CLIENTES AS
SELECT CL.ID AS ID, CL.NOMBRES||' '|| CL.APELLIDOS AS NOMBRES, TP.TIPO AS TIPO, TP.DETALLE AS DETALLE, DECODE(TP.EMPRESARIAL,'False','',TP.EMPRESARIAL) AS EMPRESARIAL  FROM CLIENTES CL
INNER JOIN TIPOS_PAGO TP ON TP.ID = CL.ID;

-- PUNTO 2  
CREATE VIEW VIAJES_CLIENTES AS
SELECT VI.FECHA_VIEAJE AS FECHA_VIEAJE, VC.NOMBRES AS NOMBRE_CONDUCTOR, VH.NRO_PLACA, CL.NOMBRES AS NOMBRE_CLIENTE,
CL.TARIFA_DINAMICA AS TARIFA_DINAMICA, VH.TIPO_SERVICIO AS TIPO_SERVICIO, CI.DESCRIPCION_CIUDAD  FROM VIAJES VI
INNER JOIN VEHICULO_CONDUCTOR VC ON VC.ID = VI.ID
INNER JOIN VEHICULOS VH ON VH.ID = VC.ID
INNER JOIN CLIENTES CL ON CL.ID = VI.ID
INNER JOIN CIUDADES CI ON CI.ID = VI.ID
ORDER BY FECHA_VIEAJE ASC;


-- PUNTO 3

-- CONSULTA PARA EJECUTAR EL PLAN DE EJECUCION 

SELECT * FROM VIAJES 
WHERE ESTADO_VIAJE_ID = 5;


-- MEJORA DEL PLAN DE EJECUCION CREANDO UN INDICE  -- SE ADJUNTA LAS IMAGENES PARA EL ANTES Y EL DESPUES 

CREATE INDEX IDX_VIAJE ON VIAJES(ESTADO_VIAJE_ID);



-- PUNTO 4

ALTER TABLE CIUDADES ADD VALOR_KILOMETRO NUMBER(10,6);
ALTER TABLE CIUDADES ADD VALOR_MINUTO NUMBER(10,6);
ALTER TABLE CIUDADES ADD VALOR_BASE	NUMBER;

--PUNTO 5


create or replace FUNCTION VALOR_DISTANCIA (an_distancia NUMBER, av_descripcion_ciudad VARCHAR2) RETURN NUMBER AS

ln_resultado NUMBER:=0;
ln_valor_kilometro NUMBER:=0;
ex_distancia EXCEPTION;

BEGIN
    IF AN_DISTANCIA > 0 THEN

        SELECT valor_kilometro INTO ln_valor_kilometro  FROM CIUDADES 
        WHERE UPPER(descripcion_ciudad) = UPPER(av_descripcion_ciudad);

            ln_resultado := an_distancia * ln_valor_kilometro;
    ELSE
        RAISE ex_distancia;
    END IF;

        RETURN ln_resultado;

EXCEPTION 
WHEN OTHERS THEN 
-- Retorna 0 en el error
RETURN ln_resultado;

END;

--PUNTO 6 

create or replace FUNCTION VALOR_TIEMPO (an_cantidad_munitos NUMBER, av_descripcion_ciudad VARCHAR2) RETURN NUMBER AS

ln_resultado NUMBER:=0;
ln_valor_minuto NUMBER:=0;
ex_minutos EXCEPTION;

BEGIN
    IF an_cantidad_munitos > 0 THEN

        SELECT valor_minuto INTO ln_valor_minuto  FROM CIUDADES 
        WHERE UPPER(descripcion_ciudad) = UPPER(av_descripcion_ciudad);

            ln_resultado := an_cantidad_munitos * ln_valor_minuto;
    ELSE
        RAISE ex_minutos;
    END IF;

        RETURN ln_resultado;

EXCEPTION 
WHEN OTHERS THEN 
RETURN ln_resultado;

END;

--PUNTO 7 

create or replace PROCEDURE CALCULAR_TARIFA (an_id_viaje NUMBER) AS

CURSOR lcur_viaje IS SELECT vi.id, ev.estado, ci.descripcion_ciudad AS descripcion_ciudad, vi.distancia_recorrida AS distancia_recorrida, 
                     vi.hora_llegada, vi.hora_salida, ci.valor_base AS valor_base  FROM factura fa
                     INNER JOIN viajes vi ON vi.id = fa.id
                     INNER JOIN estado_viaje ev ON ev.id = vi.id
                     INNER JOIN ciudades ci ON ci.id = vi.id 
                     WHERE vi.id = an_id_viaje;

ln_valor_distancia NUMBER:=0;
ln_valor_tiempo NUMBER:=0;
ln_suma_total NUMBER :=0;


ln_hora_salida NUMBER:=0;
ln_minutos_salida NUMBER:=0;
ln_hora_llegada NUMBER:=0;
ln_minutos_llegada NUMBER:=0;



BEGIN
        FOR ln_index IN lcur_viaje LOOP
        
            IF UPPER(ln_index.estado) IN ('REALIZADO') THEN
                    
                   
                   ln_suma_total:= VALOR_DISTANCIA(ln_index.distancia_recorrida,ln_index.descripcion_ciudad);
                   --ln_valor_tiempo:= VALOR_TIEMPO(ln_index.descripcion_ciudad);
                   
                   ln_suma_total := ln_suma_total + ln_index.valor_base;
                   
                UPDATE detalle_factura SET valor_pago = ln_suma_total
                where factura_id = an_id_viaje;
                
            ELSE
                UPDATE detalle_factura SET valor_pago = 0, vaor_sobrecosto = 0, valor_reserva = 0, valor_otros = 0
                where factura_id = an_id_viaje;
            END IF;
        END LOOP;

EXCEPTION 
WHEN OTHERS THEN
    UPDATE detalle_factura SET valor_pago = 0, vaor_sobrecosto = 0, valor_reserva = 0, valor_otros = 0
    where factura_id = an_id_viaje;
END;
